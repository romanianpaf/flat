{"ast":null,"code":"\"use strict\";\n\nfunction hash(str) {\n  var hash = 5381,\n    i = str.length;\n  while (i) {\n    hash = hash * 33 ^ str.charCodeAt(--i);\n  }\n\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n  return hash >>> 0;\n}\nmodule.exports = hash;","map":{"version":3,"names":["hash","str","i","length","charCodeAt","module","exports"],"sources":["/home/atria/public_html/f1.atria.live/atria/frontend/node_modules/string-hash/index.js"],"sourcesContent":["\"use strict\";\n\nfunction hash(str) {\n  var hash = 5381,\n      i    = str.length;\n\n  while(i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n  return hash >>> 0;\n}\n\nmodule.exports = hash;\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,IAAIA,CAACC,GAAG,EAAE;EACjB,IAAID,IAAI,GAAG,IAAI;IACXE,CAAC,GAAMD,GAAG,CAACE,MAAM;EAErB,OAAMD,CAAC,EAAE;IACPF,IAAI,GAAIA,IAAI,GAAG,EAAE,GAAIC,GAAG,CAACG,UAAU,CAAC,EAAEF,CAAC,CAAC;EAC1C;;EAEA;AACF;AACA;EACE,OAAOF,IAAI,KAAK,CAAC;AACnB;AAEAK,MAAM,CAACC,OAAO,GAAGN,IAAI"},"metadata":{},"sourceType":"script","externalDependencies":[]}