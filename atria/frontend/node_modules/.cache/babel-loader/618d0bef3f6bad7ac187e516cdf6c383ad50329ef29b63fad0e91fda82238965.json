{"ast":null,"code":"var _jsxFileName = \"/home/atria/public_html/f1.atria.live/atria/frontend/src/components/MDBadgeDot/index.js\";\n/**\n=========================================================\n* Material Dashboard 2 PRO React - v2.1.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/material-dashboard-pro-react\n* Copyright 2022 Creative Tim (https://www.creative-tim.com)\n\nCoded by www.creative-tim.com\n\n =========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n*/\n\nimport { forwardRef } from \"react\";\n\n// prop-types is a library for typechecking of props\nimport PropTypes from \"prop-types\";\n\n// Material Dashboard 2 PRO React components\nimport MDBox from \"components/MDBox\";\nimport MDTypography from \"components/MDTypography\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MDBadgeDot = /*#__PURE__*/forwardRef(_c = ({\n  variant,\n  color,\n  size,\n  badgeContent,\n  font,\n  ...rest\n}, ref) => {\n  let finalSize;\n  let fontSize;\n  let padding;\n  if (size === \"sm\") {\n    finalSize = \"0.5rem\";\n    fontSize = \"caption\";\n    padding = \"0.45em 0.775em\";\n  } else if (size === \"lg\") {\n    finalSize = \"0.625rem\";\n    fontSize = \"body2\";\n    padding = \"0.85em 1.375em\";\n  } else if (size === \"md\") {\n    finalSize = \"0.5rem\";\n    fontSize = \"button\";\n    padding = \"0.65em 1em\";\n  } else {\n    finalSize = \"0.375rem\";\n    fontSize = \"caption\";\n    padding = \"0.45em 0.775em\";\n  }\n  const validColors = [\"primary\", \"secondary\", \"info\", \"success\", \"warning\", \"error\", \"light\", \"dark\"];\n  const validColorIndex = validColors.findIndex(el => el === color);\n  return /*#__PURE__*/_jsxDEV(MDBox, {\n    ref: ref,\n    display: \"flex\",\n    alignItems: \"center\",\n    p: padding,\n    ...rest,\n    children: [/*#__PURE__*/_jsxDEV(MDBox, {\n      component: \"i\",\n      display: \"inline-block\",\n      width: finalSize,\n      height: finalSize,\n      borderRadius: \"50%\",\n      bgColor: validColors[validColorIndex],\n      variant: variant,\n      mr: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MDTypography, {\n      variant: fontSize,\n      fontWeight: font.weight ? font.weight : \"regular\",\n      color: font.color ? font.color : \"dark\",\n      sx: {\n        lineHeight: 0\n      },\n      children: badgeContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n});\n\n// Setting default values for the props of MDBadgeDot\n_c2 = MDBadgeDot;\nMDBadgeDot.defaultProps = {\n  variant: \"contained\",\n  color: \"info\",\n  size: \"xs\",\n  font: {}\n};\n\n// Typechecking props of the MDBadgeDot\nMDBadgeDot.propTypes = {\n  variant: PropTypes.oneOf([\"contained\", \"gradient\"]),\n  color: PropTypes.oneOf([\"primary\", \"secondary\", \"info\", \"success\", \"warning\", \"error\", \"light\", \"dark\"]),\n  size: PropTypes.oneOf([\"xs\", \"sm\", \"md\", \"lg\"]),\n  badgeContent: PropTypes.string.isRequired,\n  font: PropTypes.shape({\n    color: PropTypes.string,\n    weight: PropTypes.string\n  })\n};\nexport default MDBadgeDot;\nvar _c, _c2;\n$RefreshReg$(_c, \"MDBadgeDot$forwardRef\");\n$RefreshReg$(_c2, \"MDBadgeDot\");","map":{"version":3,"names":["forwardRef","PropTypes","MDBox","MDTypography","jsxDEV","_jsxDEV","MDBadgeDot","_c","variant","color","size","badgeContent","font","rest","ref","finalSize","fontSize","padding","validColors","validColorIndex","findIndex","el","display","alignItems","p","children","component","width","height","borderRadius","bgColor","mr","fileName","_jsxFileName","lineNumber","columnNumber","fontWeight","weight","sx","lineHeight","_c2","defaultProps","propTypes","oneOf","string","isRequired","shape","$RefreshReg$"],"sources":["/home/atria/public_html/f1.atria.live/atria/frontend/src/components/MDBadgeDot/index.js"],"sourcesContent":["/**\n=========================================================\n* Material Dashboard 2 PRO React - v2.1.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/material-dashboard-pro-react\n* Copyright 2022 Creative Tim (https://www.creative-tim.com)\n\nCoded by www.creative-tim.com\n\n =========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n*/\n\nimport { forwardRef } from \"react\";\n\n// prop-types is a library for typechecking of props\nimport PropTypes from \"prop-types\";\n\n// Material Dashboard 2 PRO React components\nimport MDBox from \"components/MDBox\";\nimport MDTypography from \"components/MDTypography\";\n\nconst MDBadgeDot = forwardRef(({ variant, color, size, badgeContent, font, ...rest }, ref) => {\n  let finalSize;\n  let fontSize;\n  let padding;\n\n  if (size === \"sm\") {\n    finalSize = \"0.5rem\";\n    fontSize = \"caption\";\n    padding = \"0.45em 0.775em\";\n  } else if (size === \"lg\") {\n    finalSize = \"0.625rem\";\n    fontSize = \"body2\";\n    padding = \"0.85em 1.375em\";\n  } else if (size === \"md\") {\n    finalSize = \"0.5rem\";\n    fontSize = \"button\";\n    padding = \"0.65em 1em\";\n  } else {\n    finalSize = \"0.375rem\";\n    fontSize = \"caption\";\n    padding = \"0.45em 0.775em\";\n  }\n\n  const validColors = [\n    \"primary\",\n    \"secondary\",\n    \"info\",\n    \"success\",\n    \"warning\",\n    \"error\",\n    \"light\",\n    \"dark\",\n  ];\n\n  const validColorIndex = validColors.findIndex((el) => el === color);\n\n  return (\n    <MDBox ref={ref} display=\"flex\" alignItems=\"center\" p={padding} {...rest}>\n      <MDBox\n        component=\"i\"\n        display=\"inline-block\"\n        width={finalSize}\n        height={finalSize}\n        borderRadius=\"50%\"\n        bgColor={validColors[validColorIndex]}\n        variant={variant}\n        mr={1}\n      />\n      <MDTypography\n        variant={fontSize}\n        fontWeight={font.weight ? font.weight : \"regular\"}\n        color={font.color ? font.color : \"dark\"}\n        sx={{ lineHeight: 0 }}\n      >\n        {badgeContent}\n      </MDTypography>\n    </MDBox>\n  );\n});\n\n// Setting default values for the props of MDBadgeDot\nMDBadgeDot.defaultProps = {\n  variant: \"contained\",\n  color: \"info\",\n  size: \"xs\",\n  font: {},\n};\n\n// Typechecking props of the MDBadgeDot\nMDBadgeDot.propTypes = {\n  variant: PropTypes.oneOf([\"contained\", \"gradient\"]),\n  color: PropTypes.oneOf([\n    \"primary\",\n    \"secondary\",\n    \"info\",\n    \"success\",\n    \"warning\",\n    \"error\",\n    \"light\",\n    \"dark\",\n  ]),\n  size: PropTypes.oneOf([\"xs\", \"sm\", \"md\", \"lg\"]),\n  badgeContent: PropTypes.string.isRequired,\n  font: PropTypes.shape({\n    color: PropTypes.string,\n    weight: PropTypes.string,\n  }),\n};\n\nexport default MDBadgeDot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}