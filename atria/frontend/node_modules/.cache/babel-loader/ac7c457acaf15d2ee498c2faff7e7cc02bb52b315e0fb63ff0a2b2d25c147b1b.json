{"ast":null,"code":"import { optimizedCompoundCondition as e, FieldCondition as t, CompoundCondition as r, ITSELF as o, NULL_CONDITION as a, ObjectQueryParser as n, buildAnd as i } from \"@ucast/core\";\nexport { defaultInstructionParsers as defaultParsers } from \"@ucast/core\";\nfunction s(e, t) {\n  if (!Array.isArray(t)) throw new Error(`\"${e.name}\" expects value to be an array`);\n}\nfunction p(e, t) {\n  if (s(e, t), !t.length) throw new Error(`\"${e.name}\" expects to have at least one element in array`);\n}\nconst l = e => (t, r) => {\n    if (typeof r !== e) throw new Error(`\"${t.name}\" expects value to be a \"${e}\"`);\n  },\n  c = {\n    type: \"compound\",\n    validate: p,\n    parse(t, r, _ref) {\n      let {\n        parse: o\n      } = _ref;\n      const a = r.map(e => o(e));\n      return e(t.name, a);\n    }\n  },\n  f = c,\n  d = {\n    type: \"compound\",\n    validate: p\n  },\n  u = {\n    type: \"field\",\n    validate(e, t) {\n      if (!(t && (t instanceof RegExp || t.constructor === Object))) throw new Error(`\"${e.name}\" expects to receive either regular expression or object of field operators`);\n    },\n    parse(e, o, a) {\n      const n = o instanceof RegExp ? new t(\"regex\", a.field, o) : a.parse(o, a);\n      return new r(e.name, [n]);\n    }\n  },\n  $ = {\n    type: \"field\",\n    validate(e, t) {\n      if (!t || t.constructor !== Object) throw new Error(`\"${e.name}\" expects to receive an object with nested query or field level operators`);\n    },\n    parse(e, r, _ref2) {\n      let {\n        parse: a,\n        field: n,\n        hasOperators: i\n      } = _ref2;\n      const s = i(r) ? a(r, {\n        field: o\n      }) : a(r);\n      return new t(e.name, n, s);\n    }\n  },\n  w = {\n    type: \"field\",\n    validate: l(\"number\")\n  },\n  y = {\n    type: \"field\",\n    validate: s\n  },\n  x = y,\n  v = y,\n  h = {\n    type: \"field\",\n    validate(e, t) {\n      if (!Array.isArray(t) || 2 !== t.length) throw new Error(`\"${e.name}\" expects an array with 2 numeric elements`);\n    }\n  },\n  m = {\n    type: \"field\",\n    validate: l(\"boolean\")\n  },\n  g = {\n    type: \"field\",\n    validate: function (e, t) {\n      if (!(\"string\" == typeof t || \"number\" == typeof t || t instanceof Date)) throw new Error(`\"${e.name}\" expects value to be comparable (i.e., string, number or date)`);\n    }\n  },\n  b = g,\n  E = b,\n  j = b,\n  O = {\n    type: \"field\"\n  },\n  R = O,\n  _ = {\n    type: \"field\",\n    validate(e, t) {\n      if (!(t instanceof RegExp) && \"string\" != typeof t) throw new Error(`\"${e.name}\" expects value to be a regular expression or a string that represents regular expression`);\n    },\n    parse(e, r, o) {\n      const a = \"string\" == typeof r ? new RegExp(r, o.query.$options || \"\") : r;\n      return new t(e.name, o.field, a);\n    }\n  },\n  q = {\n    type: \"field\",\n    parse: () => a\n  },\n  A = {\n    type: \"document\",\n    validate: l(\"function\")\n  };\nvar N = Object.freeze({\n  __proto__: null,\n  $and: c,\n  $or: f,\n  $nor: d,\n  $not: u,\n  $elemMatch: $,\n  $size: w,\n  $in: y,\n  $nin: x,\n  $all: v,\n  $mod: h,\n  $exists: m,\n  $gte: g,\n  $gt: b,\n  $lt: E,\n  $lte: j,\n  $eq: O,\n  $ne: R,\n  $regex: _,\n  $options: q,\n  $where: A\n});\nclass P extends n {\n  constructor(e) {\n    super(e, {\n      defaultOperatorName: \"$eq\",\n      operatorToConditionName: e => e.slice(1)\n    });\n  }\n  parse(e, t) {\n    return t && t.field ? i(this.parseFieldOperators(t.field, e)) : super.parse(e);\n  }\n}\nconst z = N;\nexport { v as $all, c as $and, $ as $elemMatch, O as $eq, m as $exists, b as $gt, g as $gte, y as $in, E as $lt, j as $lte, h as $mod, R as $ne, x as $nin, d as $nor, u as $not, q as $options, f as $or, _ as $regex, w as $size, A as $where, P as MongoQueryParser, z as allParsingInstructions };","map":{"version":3,"names":["s","e","t","Array","isArray","Error","name","p","length","l","r","c","type","validate","parse","_ref","o","a","map","f","d","u","RegExp","constructor","Object","n","field","$","_ref2","hasOperators","i","w","y","x","v","h","m","g","Date","b","E","j","O","R","_","query","$options","q","A","N","freeze","__proto__","$and","$or","$nor","$not","$elemMatch","$size","$in","$nin","$all","$mod","$exists","$gte","$gt","$lt","$lte","$eq","$ne","$regex","$where","P","defaultOperatorName","operatorToConditionName","slice","parseFieldOperators","z","MongoQueryParser","allParsingInstructions"],"sources":["/home/atria/public_html/f1.atria.live/atria/frontend/node_modules/@ucast/mongo/src/instructions.ts","/home/atria/public_html/f1.atria.live/atria/frontend/node_modules/@ucast/mongo/src/MongoQueryParser.ts","/home/atria/public_html/f1.atria.live/atria/frontend/node_modules/@ucast/mongo/src/index.ts"],"sourcesContent":["import {\n  CompoundCondition,\n  FieldCondition,\n  NamedInstruction,\n  CompoundInstruction,\n  FieldInstruction,\n  DocumentInstruction,\n  Comparable,\n  ITSELF,\n  NULL_CONDITION,\n  FieldParsingContext,\n  optimizedCompoundCondition,\n  ObjectQueryFieldParsingContext,\n} from '@ucast/core';\nimport { MongoQuery } from './types';\n\nfunction ensureIsArray(instruction: NamedInstruction, value: unknown) {\n  if (!Array.isArray(value)) {\n    throw new Error(`\"${instruction.name}\" expects value to be an array`);\n  }\n}\n\nfunction ensureIsNonEmptyArray(instruction: NamedInstruction, value: unknown[]) {\n  ensureIsArray(instruction, value);\n\n  if (!value.length) {\n    throw new Error(`\"${instruction.name}\" expects to have at least one element in array`);\n  }\n}\n\nfunction ensureIsComparable(instruction: NamedInstruction, value: string | number | Date) {\n  const isComparable = typeof value === 'string' || typeof value === 'number' || value instanceof Date;\n\n  if (!isComparable) {\n    throw new Error(`\"${instruction.name}\" expects value to be comparable (i.e., string, number or date)`);\n  }\n}\n\nconst ensureIs = (type: string) => (instruction: NamedInstruction, value: unknown) => {\n  if (typeof value !== type) { // eslint-disable-line valid-typeof\n    throw new Error(`\"${instruction.name}\" expects value to be a \"${type}\"`);\n  }\n};\n\nexport const $and: CompoundInstruction<MongoQuery<any>[]> = {\n  type: 'compound',\n  validate: ensureIsNonEmptyArray,\n  parse(instruction, queries, { parse }) {\n    const conditions = queries.map(query => parse(query));\n    return optimizedCompoundCondition(instruction.name, conditions);\n  }\n};\nexport const $or = $and;\nexport const $nor: CompoundInstruction<MongoQuery<any>[]> = {\n  type: 'compound',\n  validate: ensureIsNonEmptyArray,\n};\n\nexport const $not: FieldInstruction<MongoQuery<any> | RegExp> = {\n  type: 'field',\n  validate(instruction, value) {\n    const isValid = value && (value instanceof RegExp || value.constructor === Object);\n\n    if (!isValid) {\n      throw new Error(`\"${instruction.name}\" expects to receive either regular expression or object of field operators`);\n    }\n  },\n  parse(instruction, value, context) {\n    const condition = value instanceof RegExp\n      ? new FieldCondition('regex' as typeof instruction.name, context.field, value)\n      : context.parse(value, context);\n\n    return new CompoundCondition(instruction.name, [condition]);\n  },\n};\nexport const $elemMatch: FieldInstruction<MongoQuery<any>, ObjectQueryFieldParsingContext> = {\n  type: 'field',\n  validate(instruction, value) {\n    if (!value || value.constructor !== Object) {\n      throw new Error(`\"${instruction.name}\" expects to receive an object with nested query or field level operators`);\n    }\n  },\n  parse(instruction, value, { parse, field, hasOperators }) {\n    const condition = hasOperators(value) ? parse(value, { field: ITSELF }) : parse(value);\n    return new FieldCondition(instruction.name, field, condition);\n  }\n};\n\nexport const $size: FieldInstruction<number> = {\n  type: 'field',\n  validate: ensureIs('number')\n};\nexport const $in: FieldInstruction<unknown[]> = {\n  type: 'field',\n  validate: ensureIsArray,\n};\nexport const $nin = $in;\nexport const $all = $in;\nexport const $mod: FieldInstruction<[number, number]> = {\n  type: 'field',\n  validate(instruction, value) {\n    if (!Array.isArray(value) || value.length !== 2) {\n      throw new Error(`\"${instruction.name}\" expects an array with 2 numeric elements`);\n    }\n  }\n};\n\nexport const $exists: FieldInstruction<boolean> = {\n  type: 'field',\n  validate: ensureIs('boolean'),\n};\n\nexport const $gte: FieldInstruction<Comparable> = {\n  type: 'field',\n  validate: ensureIsComparable\n};\nexport const $gt = $gte;\nexport const $lt = $gt;\nexport const $lte = $gt;\n\nexport const $eq: FieldInstruction = {\n  type: 'field',\n};\nexport const $ne = $eq;\n\nexport interface RegExpFieldContext extends FieldParsingContext {\n  query: {\n    $options?: string\n  }\n}\n\nexport const $regex: FieldInstruction<string | RegExp, RegExpFieldContext> = {\n  type: 'field',\n  validate(instruction, value) {\n    if (!(value instanceof RegExp) && typeof value !== 'string') {\n      throw new Error(`\"${instruction.name}\" expects value to be a regular expression or a string that represents regular expression`);\n    }\n  },\n  parse(instruction, rawValue, context) {\n    const value = typeof rawValue === 'string'\n      ? new RegExp(rawValue, context.query.$options || '')\n      : rawValue;\n    return new FieldCondition(instruction.name, context.field, value);\n  }\n};\nexport const $options: FieldInstruction = {\n  type: 'field',\n  parse: () => NULL_CONDITION,\n};\n\nexport const $where: DocumentInstruction<() => boolean> = {\n  type: 'document',\n  validate: ensureIs('function'),\n};\n","import {\n  Condition,\n  buildAnd as and,\n  ParsingInstruction,\n  ObjectQueryParser,\n  FieldQueryOperators,\n} from '@ucast/core';\nimport { MongoQuery } from './types';\n\nexport interface ParseOptions {\n  field: string\n}\n\nexport class MongoQueryParser extends ObjectQueryParser<MongoQuery<any>> {\n  constructor(instructions: Record<string, ParsingInstruction>) {\n    super(instructions, {\n      defaultOperatorName: '$eq',\n      operatorToConditionName: name => name.slice(1),\n    });\n  }\n\n  parse<Q extends MongoQuery<any>, FQ extends FieldQueryOperators<Q> = FieldQueryOperators<Q>>(\n    query: Q | FQ,\n    options?: ParseOptions\n  ): Condition {\n    if (options && options.field) {\n      return and(this.parseFieldOperators(options.field, query as FQ));\n    }\n\n    return super.parse(query);\n  }\n}\n","import * as instructions from './instructions';\n\nexport const allParsingInstructions = instructions;\nexport * from './instructions';\nexport * from './MongoQueryParser';\nexport * from './types';\nexport { defaultInstructionParsers as defaultParsers } from '@ucast/core';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}